package main

import (
	"math"
)

type Coord struct {
	Latitude  float64
	Longitude float64
	Percent   float64
	Index     int
}

var Coords = []*Coord{
	{23.152793, 113.342832, 0.33, 0},
	{23.152792, 113.342624, -0.33, 1},
	{23.152790, 113.342417, 0.00, 1},
	{23.153019, 113.342402, 0.17, 1},
	{23.153249, 113.342386, 0.33, 1},
	{23.153478, 113.342371, 0.50, 1},
	{23.153707, 113.342356, -0.33, 2},
	{23.153937, 113.342340, -0.17, 2},
	{23.154166, 113.342325, 0.00, 2},
	{23.154163, 113.342050, 0.15, 2},
	{23.154161, 113.341776, 0.31, 2},
	{23.154159, 113.341501, 0.46, 2},
	{23.154156, 113.341226, -0.38, 3},
	{23.154363, 113.341200, -0.25, 3},
	{23.154571, 113.341174, -0.13, 3},
	{23.154778, 113.341148, 0.00, 3},
	{23.155019, 113.341134, 0.11, 3},
	{23.155259, 113.341120, 0.22, 3},
	{23.155500, 113.341105, 0.33, 3},
	{23.155740, 113.341091, 0.44, 3},
	{23.155981, 113.341077, -0.44, 4},
	{23.156221, 113.341063, -0.33, 4},
	{23.156462, 113.341048, -0.22, 4},
	{23.156702, 113.341034, -0.11, 4},
	{23.156943, 113.341020, 0.00, 4},
	{23.156935, 113.340790, 0.15, 4},
	{23.156926, 113.340560, 0.30, 4},
	{23.156918, 113.340330, 0.44, 4},
	{23.157180, 113.340290, -0.37, 5},
	{23.157443, 113.340250, -0.19, 5},
	{23.157705, 113.340210, 0.00, 5},
	{23.157719, 113.339932, 0.07, 5},
	{23.157734, 113.339655, 0.15, 5},
	{23.157748, 113.339377, 0.22, 5},
	{23.157762, 113.339099, 0.29, 5},
	{23.157777, 113.338822, 0.37, 5},
	{23.157791, 113.338544, 0.44, 5},
	{23.157719, 113.338271, -0.49, 6},
	{23.157646, 113.337998, -0.41, 6},
	{23.157574, 113.337725, -0.34, 6},
	{23.157501, 113.337452, -0.26, 6},
	{23.157429, 113.337179, -0.19, 6},
	{23.157615, 113.337056, -0.12, 6},
	{23.157800, 113.336934, -0.06, 6},
	{23.157986, 113.336811, 0.00, 6},
	{23.158173, 113.336675, 0.33, 6},
	{23.158359, 113.336539, -0.33, 7},
	{23.158546, 113.336403, 0.00, 7},
	{23.158757, 113.336492, 0.04, 7},
	{23.158967, 113.336580, 0.08, 7},
	{23.159177, 113.336669, 0.13, 7},
	{23.159388, 113.336757, 0.17, 7},
	{23.159599, 113.336845, 0.21, 7},
	{23.159809, 113.336934, 0.25, 7},
	{23.160039, 113.337005, 0.30, 7},
	{23.160269, 113.337076, 0.34, 7},
	{23.160498, 113.337146, 0.38, 7},
	{23.160728, 113.337217, 0.43, 7},
	{23.160958, 113.337288, 0.47, 7},
	{23.161169, 113.337466, -0.48, 8},
	{23.161379, 113.337644, -0.43, 8},
	{23.161590, 113.337822, -0.38, 8},
	{23.161801, 113.337999, -0.33, 8},
	{23.162012, 113.338177, -0.28, 8},
	{23.162222, 113.338355, -0.23, 8},
	{23.162433, 113.338533, -0.18, 8},
	{23.162673, 113.338513, -0.13, 8},
	{23.162914, 113.338493, -0.09, 8},
	{23.163154, 113.338472, -0.04, 8},
	{23.163394, 113.338452, 0.00, 8},
	{23.163616, 113.338411, 0.12, 8},
	{23.163838, 113.338370, 0.24, 8},
	{23.164060, 113.338330, 0.36, 8},
	{23.164282, 113.338289, 0.48, 8},
	{23.164504, 113.338248, -0.40, 9},
	{23.164747, 113.338293, -0.26, 9},
	{23.164991, 113.338338, -0.13, 9},
	{23.165234, 113.338383, 0.00, 9},
	{23.165499, 113.338369, 0.11, 9},
	{23.165763, 113.338354, 0.23, 9},
	{23.166028, 113.338340, 0.34, 9},
	{23.165860, 113.338372, 0.42, 9},
	{23.166051, 113.338299, -0.50, 10},
	{23.166241, 113.338225, -0.41, 10},
	{23.166432, 113.338152, -0.32, 10},
	{23.166626, 113.337982, -0.21, 10},
	{23.166820, 113.337812, -0.11, 10},
	{23.167014, 113.337642, 0.00, 10},
	{23.167071, 113.337389, 0.17, 10},
	{23.167128, 113.337136, 0.33, 10},
	{23.167185, 113.336883, 0.50, 10},
	{23.167241, 113.336630, -0.33, 11},
	{23.167298, 113.336377, -0.17, 11},
	{23.167355, 113.336124, 0.00, 11},
	{23.167481, 113.335938, 0.09, 11},
	{23.167608, 113.335752, 0.19, 11},
	{23.167734, 113.335566, 0.28, 11},
	{23.167814, 113.335361, 0.37, 11},
	{23.167894, 113.335156, 0.46, 11},
	{23.167975, 113.334951, -0.45, 12},
	{23.168055, 113.334746, -0.37, 12},
	{23.168211, 113.334593, -0.27, 12},
	{23.168368, 113.334440, -0.18, 12},
	{23.168525, 113.334287, -0.09, 12},
	{23.168681, 113.334134, 0.00, 12},
}

var IndexToStation = []string{
	"车场",
	"南门总站",
	"中山像站",
	"百步梯站",
	"27号楼站",
	"人文馆站",
	"西五站",
	"西秀村站",
	"修理厂站",
	"北门站",
	"北湖站",
	"卫生所站",
	"北二总站",
}

func CalcDistance(lat1, lgt1, lat2, lgt2 float64) (distance float64) {
	lat1 = lat1 / 360 * 2 * math.Pi
	lgt1 = lgt1 / 360 * 2 * math.Pi
	lat2 = lat2 / 360 * 2 * math.Pi
	lgt2 = lgt2 / 360 * 2 * math.Pi
	dlat := lat2 - lat1
	dlgt := lgt2 - lgt1
	distance = 2 * math.Asin(math.Sqrt(math.Pow(math.Sin(float64(dlat)/2), 2)+
		math.Cos(float64(lat1))*math.Cos(float64(lat2))*math.Pow(math.Sin(float64(dlgt)/2), 2))) * 6378.137
	return
}

func GetClosest(lat, lgt float64) (index int, percent, distance float64, coordIndex int) {
	var shortest float64 = math.Inf(1)
	for i, coord := range Coords {
		distance := CalcDistance(lat, lgt, coord.Latitude, coord.Longitude)
		if distance < shortest {
			shortest = distance
			index = coord.Index
			percent = coord.Percent
			coordIndex = i
		}
	}
	distance = shortest
	return
}
